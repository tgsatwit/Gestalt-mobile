rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function for authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource != null &&
             request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Users can access their own files
    match /users/{userId}/{allPaths=**} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // User avatar images (for storybook characters) - allow read/write/create/delete
    match /users/{userId}/avatars/{fileName} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // User story images (for storybook stories) - allow read/write/create/delete
    match /users/{userId}/stories/{storyId}/{fileName} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // Support legacy/fallback paths for story images
    match /storyImages/{userId}/{storyId}/{fileName} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // Support character avatars in different path structure
    match /characterAvatars/{userId}/{fileName} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // Public assets (if needed for app functionality)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write, create, delete: if false; // Only admins can write to public
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write, create, delete: if false;
    }
  }
}