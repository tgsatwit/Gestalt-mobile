rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and data validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['id', 'email', 'displayName']) &&
             request.resource.data.id == request.auth.uid &&
             request.resource.data.email is string &&
             request.resource.data.displayName is string;
    }
    
    // Validate that required string fields are present and not empty
    function hasValidString(field) {
      return request.resource.data[field] is string && 
             request.resource.data[field].size() > 0;
    }
    
    // Validate that userId matches authenticated user
    function isValidUserId() {
      return request.resource.data.userId == request.auth.uid;
    }
    
    
    // Users can read and write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      // Allow creation with proper data validation
      allow create: if isOwner(userId) && isValidUserData();
    }
    
    // Users can read and write their own child profiles
    match /childProfiles/{profileId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.userId;
      // Allow avatar-related field updates
      allow update: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId &&
                     // Allow updates that only modify avatar-related fields
                     (!request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['childName', 'userId', 'createdAt']) ||
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['avatarUrl', 'avatarMode', 'avatars', 'updatedAt', 'visualProfile']));
    }
    

    
    // Users can read and write their own memories
    match /memories/{memoryId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.userId;
    }
    
    // Users can read and write their own journals
    match /journals/{journalId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('content') &&
                     hasValidString('createdAtISO') &&
                     request.resource.data.keys().hasAll(['userId', 'content', 'createdAtISO']);
    }
    
    // Users can read and write their own milestones
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('title') &&
                     hasValidString('dateISO') &&
                     request.resource.data.keys().hasAll(['userId', 'title', 'dateISO']);
    }
    
    // Users can read and write their own appointment notes
    match /appointmentNotes/{noteId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('question') &&
                     hasValidString('createdAtISO') &&
                     request.resource.data.keys().hasAll(['userId', 'question', 'createdAtISO']);
    }
    
    // Users can read and write their own gestalts
    match /gestalts/{gestaltId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('phrase') &&
                     hasValidString('source') &&
                     hasValidString('stage') &&
                     request.resource.data.keys().hasAll(['userId', 'phrase', 'source', 'stage']);
    }
    
    // Users can read and write their own play sessions
    match /playSessions/{sessionId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('activity') &&
                     hasValidString('createdAtISO') &&
                     request.resource.data.keys().hasAll(['userId', 'activity', 'createdAtISO']);
    }
    
    // Users can read and write their own characters (for storybook) - nested under users
    match /users/{userId}/characters/{characterId} {
      allow read, write, delete: if isOwner(userId);
      allow create: if isOwner(userId) &&
                     // Validate required fields for character creation
                     request.resource.data.keys().hasAll(['name', 'userId', 'type']) &&
                     request.resource.data.userId == request.auth.uid;
    }
    
    // Users can read and write their own stories (for storybook) - nested under users
    match /users/{userId}/stories/{storyId} {
      allow read, write, delete: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // Gestalts built-in characters collection (read-only for all authenticated users)
    match /gestaltsCharacters/{characterId} {
      allow read: if isAuthenticated();
      allow write, create, delete: if false; // Only admins can modify these
    }
    
    // Legacy top-level characters collection (for backward compatibility)
    match /characters/{characterId} {
      allow read, write, delete: if isAuthenticated() && 
                                  (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.userId;
    }
    
    // Legacy top-level stories collection (for backward compatibility)
    match /stories/{storyId} {
      allow read, write, delete: if isAuthenticated() && 
                                  (resource == null || request.auth.uid == resource.data.userId);
      allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.userId;
    }
    
    // Users can read and write their own specialists
    match /specialists/{specialistId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('name') &&
                     hasValidString('title') &&
                     request.resource.data.keys().hasAll(['userId', 'name', 'title']);
    }
    
    // Users can read and write their own child-specialist links
    match /childSpecialistLinks/{linkId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow update, delete: if isAuthenticated() && 
                             request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                     isValidUserId() &&
                     hasValidString('childId') &&
                     hasValidString('specialistId') &&
                     hasValidString('relationshipType') &&
                     request.resource.data.keys().hasAll(['userId', 'childId', 'specialistId', 'relationshipType']);
    }
    
    // Deny all other document access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}